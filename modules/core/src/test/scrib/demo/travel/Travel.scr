//$ bin/scribblec.sh modules/core/src/test/scrib/demo/travel/Travel.scr -ip modules/core/src/test/scrib/ -d modules/core/src/test/scrib -session Booking -api Booking C -V

//$ javadoc -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar;'modules/validation/src/main/java/Test modules/core/src/test/scrib/demo/travel/*.java -d test/doc/travel

module demo.travel.Travel;

type <java> "java.lang.Integer" from "rt.jar" as Int;
type <java> "java.lang.String" from "rt.jar" as String;

global protocol Booking(role C, role A, role S)
{
	choice at C
	{
		Query(String) from C to A;
		Quote(Int) from A to C;
		() from A to S;   // Dummy
		do Booking(C, A, S);
	}
	or
	{
		choice at C
		{
			Yes() from C to A;
			Yes() from A to S;
			Payment(String) from C to S;
			Ack() from S to C;
		}
		or
		{
			No() from C to A;
			No() from A to S;
		}
		Bye() from C to A;
	}
}
