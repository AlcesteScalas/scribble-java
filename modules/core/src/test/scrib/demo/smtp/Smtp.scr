//$ bin/scribblec.sh modules/core/src/test/scrib/demo/smtp/Smtp.scr -ip modules/core/src/test/scrib/ -d modules/core/src/test/scrib/ -api Smtp C -subtypes -V
//$ javadoc -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar;'modules/core/src/test/scrib -subpackages demo.smtp.Smtp.Smtp -d test/doc/smtp


module demo.smtp.Smtp;

sig <java> "demo.smtp.message.server._220"
		from "demo/smtp/message/server/_220.java" as 220;
sig <java> "demo.smtp.message.server._250"
		from "demo/smtp/message/server/_250.java" as 250;
sig <java> "demo.smtp.message.server._250d"
		from "demo/smtp/message/server/_250d.java" as 250d;
sig <java> "demo.smtp.message.server._235"
		from "demo/smtp/message/server/_235.java" as 235;
sig <java> "demo.smtp.message.server._535"
		from "demo/smtp/message/server/_535.java" as 535;
sig <java> "demo.smtp.message.server._501"
		from "demo/smtp/message/server/_501.java" as 501;
sig <java> "demo.smtp.message.server._354"
		from "demo/smtp/message/server/_354.java" as 354;

sig <java> "demo.smtp.message.client.Ehlo"
		from "demo/smtp/message/client/Ehlo.java" as Ehlo;
sig <java> "demo.smtp.message.client.StartTls"
		from "demo/smtp/message/client/StartTls.java" as StartTls;
sig <java> "demo.smtp.message.client.Auth"
		from "demo/smtp/message/client/Auth.java" as Auth;
sig <java> "demo.smtp.message.client.Mail"
		from "demo/smtp/message/client/Mail.java" as Mail;
sig <java> "demo.smtp.message.client.Rcpt"
		from "demo/smtp/message/client/Rcpt.java" as Rcpt;
sig <java> "demo.smtp.message.client.Subject"
		from "demo/smtp/message/client/Subject.java" as Subject;
sig <java> "demo.smtp.message.client.DataLine"
		from "demo/smtp/message/client/DataLine.java" as DataLine;
sig <java> "demo.smtp.message.client.Data"
		from "demo/smtp/message/client/Data.java" as Data;
sig <java> "demo.smtp.message.client.EndOfData"
		from "demo/smtp/message/client/EndOfData.java" as EndOfData;
sig <java> "demo.smtp.message.client.Quit"
		from "demo/smtp/message/client/Quit.java" as Quit;

global protocol Smtp(role S, role C)
{
	220 from S to C;
	do Ehlo(S, C);
}

aux global protocol Ehlo(role S, role C)
{
	choice at C
	{
		Ehlo from C to S;
		rec X
		{
			choice at S
			{
				//250 from S to C;
				250d from S to C;
				continue X;
			}
			or
			{
				250 from S to C;
				do StartTls(S, C);
			}
		}
	}
	or
	{
		Quit from C to S;
	}
}

aux global protocol StartTls(role S, role C)
{
	choice at C
	{
		StartTls from C to S;
		220 from S to C;
		// Do TLS handshake here: level below the application level protocol (like regular TCP handshake)
		do SecureEhlo(S, C);
	}
	or
	{
		Quit from C to S;
	}
}

aux global protocol SecureEhlo(role S, role C)
{
	choice at C
	{
		Ehlo from C to S;
		rec X
		{
			choice at S
			{
				250d from S to C;
				continue X;
			}
			or
			{
				250 from S to C;
				do Auth(S, C);
			}
		}
	}
	or
	{
		Quit from C to S;
	}
}

aux global protocol Auth(role S, role C)
{
	rec Y
	{
		choice at C
		{
			Auth from C to S;
			choice at S
			{
				235 from S to C;
				do Mail(S, C);
			}
			or
			{
				535 from S to C;
				continue Y;
			}
			//.. 501 Invalid base64 Data 
		}
		or
		{
			Quit from C to S;
		}
	}
}

aux global protocol Mail(role S, role C)
{
	rec Z1
	{
		choice at C
		{
			Mail from C to S; //Mail from:<a@b.com>
			choice at S
			{
				501 from S to C;
				continue Z1;
			}
			or
			{
				250 from S to C;
				
				rec Z2
				{
					choice at C
					{
						Rcpt from C to S; //Rcpt to:<c@d.com>
						choice at S
						{
							250 from S to C;
							continue Z2;
						}
					}
					or
					{
						Data from C to S;
						354 from S to C;
						//too from C to S; //to:<you>
						//froom from C to S; //from:<me>
						rec Z3
						{
							choice at C
							{
								DataLine from C to S;
								continue Z3;
							}
							or
							{
								Subject from C to S; //Subject:<my Subject>
								continue Z3;
							}
							or
							{
								EndOfData from C to S; // CRLF.CRLF
								250 from S to C;
								continue Z1;
							}
						}	
					}
				}
			}
		}
		or
		{
			Quit from C to S;
		}
	}
}
